% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/batch.R
\name{batch}
\alias{batch}
\title{Batch process a function that takes command arguments.}
\usage{
batch(
  args = commandArgs(),
  fun,
  key_arg,
  ...,
  report = FALSE,
  error_report = list(),
  webhook_var = "BATCH_WEBHOOK",
  msg_log_dir = "batch_message_log"
)
}
\arguments{
\item{fun}{The function to be called.  Must accept command line arguments in
a parameter called 'args' and should return a named list of values to be
reported to the web hook.}

\item{key_arg}{The name of an argument that is to be included in
error/warning messages to identify the specific run causing the
error/warning.}

\item{...}{Other arguments passed to fun.}

\item{report}{Determines whether or not the results from the function are
written to the webhook specified by environmental variable called specified
in \code{webhook_var}.  When TRUE, messages are reported to webhook, so
local logging is disabled (used for server-based processing).  Generally,
set to FALSE for local processing. Must be FALSE to log messages locally or
report messages to console.}

\item{error_report}{A named list of values that is appended to the webhook
report.  Used for reporting errors in lieu of the values that would have
been returned from `fun` if there had not been an error.}

\item{webhook_var}{Name of environment variable containing the URL for the
reporting webhook.}

\item{msg_log_dir}{local directory where messages will be logged.  Directory
must exist.  Set to NULL to report messages to console rather than log to
files (useful for debugging). NOTE: \code{report} argument must be FALSE
for any logging to occur (see \code{report} argument).}

\item{args()}{Character vector of command line arguments to simulate
operation from the command line.  Must be in the form
`--<parameter>=<argument>` (or `--<parameter>` for boolean switch). By
default, the values returned from commandArgs().}
}
\description{
This function is meant for batch processing of any function that accepts
command line arguments.  It can be nested within an \code{_apply} style
function and passed a list of command args for repeated batch processing. To
operate, \code{batch} wraps any function specified as \code{fun} and, in
doing so, add error trapping, recovery, and the potential to either log error
and warning messages or report to a webhook.
}
\details{
For local batch processing (e.g., using mclapply), set report = F.

Setting \code{msg_log_dir} = NULL is primarily for debugging a single call to
batch, as reporting to the console isn't ideal for a batched function.

A note on parallel processing... \code{batch} has been tested extensively
with \code{mclapply} for parallel processing. The safest approach is to embed
\code{mclapply} in a script called from the command prompt using
\code{Rscript} (Google "Rscript command line" for more.) Parallel processing
using \code{mclapply} to call \code{batch} from within Rstudio often works,
but can cause Rstudio to freeze (perhaps only if screen saver engages??).  In
this case, batch processing usually proceeds successfully even after RStudio
is frozen, but RStudio must be terminated manually, potentially leading to
loss of code.
}
